#Importing random to generate random numbers.
import random as r
#Establish global variables for each cafeteria's mean and deviation. + the optimum happiness constant.
optimumHappiness = 2000
cafeteria1mean = 7
cafeteria1deviation = 3
cafeteria2mean = 4
cafeteria2deviation = 10
cafeteria3mean = 10
cafeteria3deviation = 6
cafeteria4mean = 5
cafeteria4deviation = 2
def exploitOnly():
    #Establishes happiness variables for each cafeteria.
    cafeteria1happiness = 0
    cafeteria2happiness = 0
    cafeteria3happiness = 0
    cafeteria4happiness = 0
    #Makes lists which contain the variables for a cafeteria's happiness, its mean, and its deviation.
    cafeteria1info = [cafeteria1happiness, cafeteria1mean, cafeteria1deviation]
    cafeteria2info = [cafeteria2happiness, cafeteria2mean, cafeteria2deviation]
    cafeteria3info = [cafeteria3happiness, cafeteria3mean, cafeteria3deviation]
    cafeteria4info = [cafeteria4happiness, cafeteria4mean, cafeteria4deviation]
    #Does a test run of each cafeteria.
    test1 = r.normalvariate(cafeteria1mean, cafeteria1deviation)
    test2 = r.normalvariate(cafeteria2mean, cafeteria2deviation)
    test3 = r.normalvariate(cafeteria3mean, cafeteria3deviation)
    test4 = r.normalvariate(cafeteria4mean, cafeteria4deviation)
    #Assigns these as the cafeterias' respective happiness values.
    cafeteria1info[0] = test1
    cafeteria2info[0] = test2
    cafeteria3info[0] = test3
    cafeteria4info[0] = test4
    #Adds the first four runs to the total.
    totalHappiness = test1 + test2 + test3 + test4
    #Makes an array of the cafeterias' info lists.
    HappinessArray = []
    HappinessArray.append(cafeteria1info)
    HappinessArray.append(cafeteria2info)
    HappinessArray.append(cafeteria3info)
    HappinessArray.append(cafeteria4info)
    #Sorts them by the first value in each list (the happiness value).
    HappinessArray.sort()
    #The last list will have the greatest happiness value, thus it's assigned as topHappiness.
    topHappiness = HappinessArray[3]
    #Runs the rest of the days with the top cafeteria from the first 4 runs' mean and deviation.
    days = 0
    while days < 196:
        totalHappiness += r.normalvariate(topHappiness[1], topHappiness[2])
        days += 1
    #Returns the total happiness with two significant figures (function for that found on internet.
    return float("%.*f"%(2, totalHappiness))

def exploreOnly():
    #Establishes happiness variables for each cafeteria.
    cafeteria1happiness = 0
    cafeteria2happiness = 0
    cafeteria3happiness = 0
    cafeteria4happiness = 0
    #Adds to the first cafeteria's happiness value a random value that is within the first cafeteria's deviation 
    #around its mean. Does this for first 50 days then moves to next cafeteria for 50 days and so on.
    days = 0
    while days >= 0 and days <= 49:
        cafeteria1happiness += r.normalvariate(cafeteria1mean, cafeteria1deviation)
        days += 1
    while days >= 50 and days <= 99:
        cafeteria2happiness += r.normalvariate(cafeteria2mean, cafeteria2deviation)
        days += 1
    while days >= 100 and days <= 149:
        cafeteria3happiness += r.normalvariate(cafeteria3mean, cafeteria3deviation)
        days += 1
    while days >= 150 and days <= 199:
        cafeteria4happiness += r.normalvariate(cafeteria4mean, cafeteria4deviation)
        days += 1
    #Adds together the total of all the cafeterias' happiness values. Returns this with 2 significant
    #figures of precision.
    actualTotalHappiness = cafeteria1happiness + cafeteria2happiness + cafeteria3happiness + cafeteria4happiness
    return float("%.*f"%(2,actualTotalHappiness))

def eGreedy(e=10):
    #Establishes total happiness and cafeterias' happiness values.
    totalHappiness = 0
    cafeteria1happiness = 0
    cafeteria2happiness = 0
    cafeteria3happiness = 0
    cafeteria4happiness = 0
    #Makes lists for each cafeteria containing their happiness value, their mean, and their deviation.
    cafeteria1info = [cafeteria1happiness, cafeteria1mean, cafeteria1deviation]
    cafeteria2info = [cafeteria2happiness, cafeteria2mean, cafeteria2deviation]
    cafeteria3info = [cafeteria3happiness, cafeteria3mean, cafeteria3deviation]
    cafeteria4info = [cafeteria4happiness, cafeteria4mean, cafeteria4deviation]
    #Establishes a list of the lists above, a 2D array.
    happinessArray = []
    #First, visits each cafeteria one time, assigning the value found to the happiness value in each
    #happiness list.
    cafeteria1info[0] = r.normalvariate(cafeteria1mean, cafeteria1deviation)
    cafeteria2info[0] = r.normalvariate(cafeteria2mean, cafeteria2deviation)
    cafeteria3info[0] = r.normalvariate(cafeteria3mean, cafeteria3deviation)
    cafeteria4info[0] = r.normalvariate(cafeteria4mean, cafeteria4deviation)
    #Adds all cafeterias' happiness lists to the 2D array.
    happinessArray.append(cafeteria1info)
    happinessArray.append(cafeteria2info)
    happinessArray.append(cafeteria3info)
    happinessArray.append(cafeteria4info)
    #Makes e a decimal value.
    e = e / 100
    #Gives a random value between 0 and 1.
    ran = r.random()
    #The while loop starts at 0 and goes to 195, totaling 200 trials when added to first 4 runs above.
    days = 0
    while days < 196:
        #Sorts the 2D array containing the four cafeteria happiness lists. The last list in it will
        #be the one the one with the greatest happiness value.
        happinessArray.sort()
        #Takes the last list of the array and takes the second value within that list, which is
        #its mean, as the best.
        bestCafeteriaMean = happinessArray[3][1]
        #Takes the last list of the array and takes the second value within that list, which is
        #its deviation, as the best.
        bestCafeteriaDev = happinessArray[3][2]
        #Runs if e is greater than the random value generated before; a 10% chance assuming e = 10.
        if ran < e:
            #Picks randomly between the four cafeterias.
            i = r.randint(1,4)
            if i == 1:
                #Creates new variable for happiness value of a given cafeteria's happiness list,
                #changing it, adding it to the total, and then redoing the happiness 2D array with it.
                cafe1NewHappiness = r.normalvariate(cafeteria1mean, cafeteria1deviation)
                totalHappiness += cafe1NewHappiness
                #The entire list is popped and then replaced identically, with the exception of the
                #new happiness value being inserted in.
                #This means that when the loop is ran again, this cafeteria's new happiness value will
                #be considered as a possibility for being the best mean and deviation.
                #This process is repeated in each of the following if statements based on i's value.
                happinessArray.pop()
                happinessArray.pop()
                happinessArray.pop()
                happinessArray.pop()
                cafeteria1info = [cafe1NewHappiness, cafeteria1mean, cafeteria1deviation]
                happinessArray.append(cafeteria1info)
                happinessArray.append(cafeteria2info)
                happinessArray.append(cafeteria3info)
                happinessArray.append(cafeteria4info)
            elif i == 2:
                cafe2NewHappiness = r.normalvariate(cafeteria2mean, cafeteria2deviation)
                totalHappiness += cafe2NewHappiness
                happinessArray.pop()
                happinessArray.pop()
                happinessArray.pop()
                happinessArray.pop()
                cafeteria2info = [cafe2NewHappiness, cafeteria2mean, cafeteria2deviation]
                happinessArray.append(cafeteria1info)
                happinessArray.append(cafeteria2info)
                happinessArray.append(cafeteria3info)
                happinessArray.append(cafeteria4info)
            elif i == 3:
                cafe3NewHappiness = r.normalvariate(cafeteria3mean, cafeteria3deviation)
                totalHappiness += cafe3NewHappiness
                happinessArray.pop()
                happinessArray.pop()
                happinessArray.pop()
                happinessArray.pop()
                cafeteria3info = [cafe3NewHappiness, cafeteria3mean, cafeteria3deviation]
                happinessArray.append(cafeteria1info)
                happinessArray.append(cafeteria2info)
                happinessArray.append(cafeteria3info)
                happinessArray.append(cafeteria4info)
            elif i == 4:
                cafe4NewHappiness = r.normalvariate(cafeteria4mean, cafeteria4deviation)
                totalHappiness += cafe4NewHappiness
                happinessArray.pop()
                happinessArray.pop()
                happinessArray.pop()
                happinessArray.pop()
                cafeteria4info = [cafe4NewHappiness, cafeteria4mean, cafeteria4deviation]
                happinessArray.append(cafeteria1info)
                happinessArray.append(cafeteria2info)
                happinessArray.append(cafeteria3info)
                happinessArray.append(cafeteria4info)
            #Continues the loop by adding a day.
            days += 1
        else:
            #For the other 90% of the time that the random value between 0 and 1 is higher than 0.1,
            #the best cafeteria's happiness value is added to the total happiness.
            totalHappiness += r.normalvariate(bestCafeteriaMean, bestCafeteriaDev)
            #Continues the loop.
            days += 1
    #Returns the total happiness with 2 significant figures of precision.
    return float("%.*f"%(2, totalHappiness))

def simulation(t, e=10):
    #The format for this function is given in the lecture slides.
    #t is the number of trials done, is an input that can be changed.
    #The repeated use of "%.*f"%(2, number) is to find only the first two significant figures of the number.
    print("Optimum Happiness:", optimumHappiness)
    print("\nExplore Only:")
    #Calculations here were given in lecture slides.
    print("Expected Happiness:", "%.*f" % (2, 50*(cafeteria1mean + cafeteria2mean + cafeteria3mean + cafeteria4mean)))
    print("Expected Regret:", "%.*f" % (2, optimumHappiness - 50*(cafeteria1mean + cafeteria2mean + cafeteria3mean + cafeteria4mean)))
    #The while loop here repeats the exploreOnly() function t times and then divides it by t, thus finding
    #an average. This is then used in the calculations.
    exploreVal = 0
    counter1 = t
    while counter1 > 0:
        exploreVal += exploreOnly()
        counter1 -= 1
    exploreValAvg = exploreVal / t
    print("Simulated Happiness:", "%.*f"%(2, exploreValAvg))
    print("Simulated Regret:", "%.*f"%(2, optimumHappiness - exploreValAvg))
    print("\nExploit Only:",)
    #The toolong variable is just because there's a limit on how long a single line of code can be,
    #solely for use in the next line.
    toolong = cafeteria1mean + cafeteria2mean + cafeteria3mean + cafeteria4mean
    print("Expected Happiness:", "%.*f" % (2, toolong + 196 * (max(cafeteria1mean, cafeteria2mean, cafeteria3mean, cafeteria4mean))))
    print("Expected Regret:", "%.*f" % (2, 2000 - (toolong + 196 * (max(cafeteria1mean, cafeteria2mean, cafeteria3mean, cafeteria4mean)))))
    #Another while loop to find the average of the exploit function when run t times.
    exploitVal = 0
    counter2 = t
    while counter2 > 0:
        exploitVal += exploitOnly()
        counter2 -= 1
    exploitValAvg = exploitVal / t
    print("Simulated Happiness:", "%.*f"%(2, exploitValAvg))
    print("Simulated Regret:", "%.*f"%(2, optimumHappiness - exploitValAvg))
    print("\neGreedy:")
    #Calculations given in the lecture slides, but adapted from the 300 day 3 cafeteria model to the
    #one we're using, the 200 day 4 cafeteria model.
    print("Expected Happiness:", "%.*f"%(2, 10 * 180 + 10 * 2.5 + 10 * 4 + 10 * 5 + 10 * 7))
    print("Expected Regret:", "%.*f"%(2, optimumHappiness - (10 * 180 + 10 * 2.5 + 10 * 4 + 10 * 5 + 10 * 7)))
    #Another while loop to find the average of the eGreedy() function run t times.
    greedVal = 0
    counter3 = t
    while counter3 > 0:
        greedVal += eGreedy()
        counter3 -= 1
    greedValAvg = greedVal / t
    print("Simulated Happiness:", "%.*f" % (2, greedValAvg))
    print("Simulated Regret:", "%.*f" % (2, optimumHappiness - greedValAvg))

